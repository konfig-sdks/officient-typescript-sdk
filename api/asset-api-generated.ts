/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AssetAddCustomType400Response } from '../models';
// @ts-ignore
import { AssetAddCustomTypeResponse } from '../models';
// @ts-ignore
import { AssetCreateNewAsset400Response } from '../models';
// @ts-ignore
import { AssetCreateNewAssetResponse } from '../models';
// @ts-ignore
import { AssetGetCustomTypesListResponse } from '../models';
// @ts-ignore
import { AssetGetDetailResponse } from '../models';
// @ts-ignore
import { AssetListAssetsResponse } from '../models';
// @ts-ignore
import { AssetRemoveCustomTypeResponse } from '../models';
// @ts-ignore
import { AssetRemoveResponse } from '../models';
// @ts-ignore
import { AssetUpdateAsset400Response } from '../models';
// @ts-ignore
import { AssetUpdateAssetResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add custom asset type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomType: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/assets/types/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/types/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAsset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/assets/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List custom asset types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomTypesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/assets/types/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/types/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about one asset
         * @summary Asset detail
         * @param {number} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (assetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getDetail', 'assetId', assetId)
            const localVarPath = `/1.0/assets/{asset_id}/detail`
                .replace(`{${"asset_id"}}`, encodeURIComponent(String(assetId !== undefined ? assetId : `-asset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/{asset_id}/detail',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all assets
         * @summary List assets
         * @param {number} [page] Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
         * @param {number} [personId] view only assets that belong to a specific person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets: async (page?: number, personId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/assets/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (personId !== undefined) {
                localVarQueryParameter['person_id'] = personId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete asset
         * @param {number} assetId The id of the asset that will be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (assetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('remove', 'assetId', assetId)
            const localVarPath = `/1.0/assets/{asset_id}`
                .replace(`{${"asset_id"}}`, encodeURIComponent(String(assetId !== undefined ? assetId : `-asset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/{asset_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete custom asset type
         * @param {number} assetTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomType: async (assetTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetTypeId' is not null or undefined
            assertParamExists('removeCustomType', 'assetTypeId', assetTypeId)
            const localVarPath = `/1.0/assets/types/{asset_type_id}`
                .replace(`{${"asset_type_id"}}`, encodeURIComponent(String(assetTypeId !== undefined ? assetTypeId : `-asset_type_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/types/{asset_type_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit asset
         * @param {number} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset: async (assetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('updateAsset', 'assetId', assetId)
            const localVarPath = `/1.0/assets/{asset_id}`
                .replace(`{${"asset_id"}}`, encodeURIComponent(String(assetId !== undefined ? assetId : `-asset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/assets/{asset_id}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add custom asset type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomType(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetAddCustomTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomType(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAsset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetCreateNewAssetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAsset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List custom asset types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomTypesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetGetCustomTypesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomTypesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details about one asset
         * @summary Asset detail
         * @param {AssetApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(requestParameters: AssetApiGetDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetGetDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(requestParameters.assetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all assets
         * @summary List assets
         * @param {AssetApiListAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssets(requestParameters: AssetApiListAssetsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetListAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssets(requestParameters.page, requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete asset
         * @param {AssetApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: AssetApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.assetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete custom asset type
         * @param {AssetApiRemoveCustomTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCustomType(requestParameters: AssetApiRemoveCustomTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetRemoveCustomTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCustomType(requestParameters.assetTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit asset
         * @param {AssetApiUpdateAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAsset(requestParameters: AssetApiUpdateAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetUpdateAssetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAsset(requestParameters.assetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetApiFp(configuration)
    return {
        /**
         * 
         * @summary Add custom asset type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomType(options?: AxiosRequestConfig): AxiosPromise<AssetAddCustomTypeResponse> {
            return localVarFp.addCustomType(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAsset(options?: AxiosRequestConfig): AxiosPromise<AssetCreateNewAssetResponse> {
            return localVarFp.createNewAsset(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List custom asset types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomTypesList(options?: AxiosRequestConfig): AxiosPromise<AssetGetCustomTypesListResponse> {
            return localVarFp.getCustomTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about one asset
         * @summary Asset detail
         * @param {AssetApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(requestParameters: AssetApiGetDetailRequest, options?: AxiosRequestConfig): AxiosPromise<AssetGetDetailResponse> {
            return localVarFp.getDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all assets
         * @summary List assets
         * @param {AssetApiListAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets(requestParameters: AssetApiListAssetsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AssetListAssetsResponse> {
            return localVarFp.listAssets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete asset
         * @param {AssetApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: AssetApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<AssetRemoveResponse> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete custom asset type
         * @param {AssetApiRemoveCustomTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomType(requestParameters: AssetApiRemoveCustomTypeRequest, options?: AxiosRequestConfig): AxiosPromise<AssetRemoveCustomTypeResponse> {
            return localVarFp.removeCustomType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit asset
         * @param {AssetApiUpdateAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset(requestParameters: AssetApiUpdateAssetRequest, options?: AxiosRequestConfig): AxiosPromise<AssetUpdateAssetResponse> {
            return localVarFp.updateAsset(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetail operation in AssetApi.
 * @export
 * @interface AssetApiGetDetailRequest
 */
export type AssetApiGetDetailRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AssetApiGetDetail
    */
    readonly assetId: number
    
}

/**
 * Request parameters for listAssets operation in AssetApi.
 * @export
 * @interface AssetApiListAssetsRequest
 */
export type AssetApiListAssetsRequest = {
    
    /**
    * Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
    * @type {number}
    * @memberof AssetApiListAssets
    */
    readonly page?: number
    
    /**
    * view only assets that belong to a specific person
    * @type {number}
    * @memberof AssetApiListAssets
    */
    readonly personId?: number
    
}

/**
 * Request parameters for remove operation in AssetApi.
 * @export
 * @interface AssetApiRemoveRequest
 */
export type AssetApiRemoveRequest = {
    
    /**
    * The id of the asset that will be deleted
    * @type {number}
    * @memberof AssetApiRemove
    */
    readonly assetId: number
    
}

/**
 * Request parameters for removeCustomType operation in AssetApi.
 * @export
 * @interface AssetApiRemoveCustomTypeRequest
 */
export type AssetApiRemoveCustomTypeRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AssetApiRemoveCustomType
    */
    readonly assetTypeId: number
    
}

/**
 * Request parameters for updateAsset operation in AssetApi.
 * @export
 * @interface AssetApiUpdateAssetRequest
 */
export type AssetApiUpdateAssetRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AssetApiUpdateAsset
    */
    readonly assetId: number
    
}

/**
 * AssetApiGenerated - object-oriented interface
 * @export
 * @class AssetApiGenerated
 * @extends {BaseAPI}
 */
export class AssetApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add custom asset type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public addCustomType(options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).addCustomType(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public createNewAsset(options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).createNewAsset(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List custom asset types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public getCustomTypesList(options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).getCustomTypesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details about one asset
     * @summary Asset detail
     * @param {AssetApiGetDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public getDetail(requestParameters: AssetApiGetDetailRequest, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).getDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all assets
     * @summary List assets
     * @param {AssetApiListAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public listAssets(requestParameters: AssetApiListAssetsRequest = {}, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).listAssets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete asset
     * @param {AssetApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public remove(requestParameters: AssetApiRemoveRequest, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete custom asset type
     * @param {AssetApiRemoveCustomTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public removeCustomType(requestParameters: AssetApiRemoveCustomTypeRequest, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).removeCustomType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit asset
     * @param {AssetApiUpdateAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApiGenerated
     */
    public updateAsset(requestParameters: AssetApiUpdateAssetRequest, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).updateAsset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
