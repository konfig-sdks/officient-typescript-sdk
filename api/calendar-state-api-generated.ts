/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CalendarStateUnlockMonthProcessedRequest } from '../models';
// @ts-ignore
import { CalendarStateUnlockMonthProcessedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CalendarStateApi - axios parameter creator
 * @export
 */
export const CalendarStateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unlock the calendar for a month that has already been processed by your payroll provider. This is usually done to add corrections.
         * @summary Unlock calendar
         * @param {CalendarStateUnlockMonthProcessedRequest} [calendarStateUnlockMonthProcessedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockMonthProcessed: async (calendarStateUnlockMonthProcessedRequest?: CalendarStateUnlockMonthProcessedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/calendar/state/lock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: calendarStateUnlockMonthProcessedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/state/lock',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(calendarStateUnlockMonthProcessedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarStateApi - functional programming interface
 * @export
 */
export const CalendarStateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CalendarStateApiAxiosParamCreator(configuration)
    return {
        /**
         * Unlock the calendar for a month that has already been processed by your payroll provider. This is usually done to add corrections.
         * @summary Unlock calendar
         * @param {CalendarStateApiUnlockMonthProcessedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlockMonthProcessed(requestParameters: CalendarStateApiUnlockMonthProcessedRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarStateUnlockMonthProcessedResponse>> {
            const calendarStateUnlockMonthProcessedRequest: CalendarStateUnlockMonthProcessedRequest = {
                disable_lock: requestParameters.disable_lock
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlockMonthProcessed(calendarStateUnlockMonthProcessedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CalendarStateApi - factory interface
 * @export
 */
export const CalendarStateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CalendarStateApiFp(configuration)
    return {
        /**
         * Unlock the calendar for a month that has already been processed by your payroll provider. This is usually done to add corrections.
         * @summary Unlock calendar
         * @param {CalendarStateApiUnlockMonthProcessedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockMonthProcessed(requestParameters: CalendarStateApiUnlockMonthProcessedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CalendarStateUnlockMonthProcessedResponse> {
            return localVarFp.unlockMonthProcessed(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for unlockMonthProcessed operation in CalendarStateApi.
 * @export
 * @interface CalendarStateApiUnlockMonthProcessedRequest
 */
export type CalendarStateApiUnlockMonthProcessedRequest = {
    
} & CalendarStateUnlockMonthProcessedRequest

/**
 * CalendarStateApiGenerated - object-oriented interface
 * @export
 * @class CalendarStateApiGenerated
 * @extends {BaseAPI}
 */
export class CalendarStateApiGenerated extends BaseAPI {
    /**
     * Unlock the calendar for a month that has already been processed by your payroll provider. This is usually done to add corrections.
     * @summary Unlock calendar
     * @param {CalendarStateApiUnlockMonthProcessedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarStateApiGenerated
     */
    public unlockMonthProcessed(requestParameters: CalendarStateApiUnlockMonthProcessedRequest = {}, options?: AxiosRequestConfig) {
        return CalendarStateApiFp(this.configuration).unlockMonthProcessed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
