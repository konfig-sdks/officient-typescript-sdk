/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomEventTypeGetListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomEventTypeApi - axios parameter creator
 * @export
 */
export const CustomEventTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * fetch a list of custom event types including time off types, overtime types,..
         * @summary Custom event types
         * @param {number} year the year you want custom event type to be returned for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getList', 'year', year)
            const localVarPath = `/1.0/calendar/events/types/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/events/types/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomEventTypeApi - functional programming interface
 * @export
 */
export const CustomEventTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomEventTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * fetch a list of custom event types including time off types, overtime types,..
         * @summary Custom event types
         * @param {CustomEventTypeApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: CustomEventTypeApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventTypeGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomEventTypeApi - factory interface
 * @export
 */
export const CustomEventTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomEventTypeApiFp(configuration)
    return {
        /**
         * fetch a list of custom event types including time off types, overtime types,..
         * @summary Custom event types
         * @param {CustomEventTypeApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: CustomEventTypeApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<CustomEventTypeGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getList operation in CustomEventTypeApi.
 * @export
 * @interface CustomEventTypeApiGetListRequest
 */
export type CustomEventTypeApiGetListRequest = {
    
    /**
    * the year you want custom event type to be returned for
    * @type {number}
    * @memberof CustomEventTypeApiGetList
    */
    readonly year: number
    
}

/**
 * CustomEventTypeApiGenerated - object-oriented interface
 * @export
 * @class CustomEventTypeApiGenerated
 * @extends {BaseAPI}
 */
export class CustomEventTypeApiGenerated extends BaseAPI {
    /**
     * fetch a list of custom event types including time off types, overtime types,..
     * @summary Custom event types
     * @param {CustomEventTypeApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventTypeApiGenerated
     */
    public getList(requestParameters: CustomEventTypeApiGetListRequest, options?: AxiosRequestConfig) {
        return CustomEventTypeApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
