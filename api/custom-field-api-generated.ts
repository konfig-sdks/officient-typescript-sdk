/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldEditValueForObject400Response } from '../models';
// @ts-ignore
import { CustomFieldEditValueForObjectResponse } from '../models';
// @ts-ignore
import { CustomFieldListFieldsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldApi - axios parameter creator
 * @export
 */
export const CustomFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update the custom field value for a specific object (either a person, car, asset, contract,..)
         * @summary Edit custom field value
         * @param {number} customFieldId Id of the custom field
         * @param {string} objectType type of object to be edited. It can be: employee, asset, car, contract, software_license, training_participant, training
         * @param {number} objectId ID of the object to be edited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editValueForObject: async (customFieldId: number, objectType: string, objectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('editValueForObject', 'customFieldId', customFieldId)
            // verify required parameter 'objectType' is not null or undefined
            assertParamExists('editValueForObject', 'objectType', objectType)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('editValueForObject', 'objectId', objectId)
            const localVarPath = `/1.0/custom_fields/{custom_field_id}/{object_type}/{object_id}`
                .replace(`{${"custom_field_id"}}`, encodeURIComponent(String(customFieldId !== undefined ? customFieldId : `-custom_field_id-`)))
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType !== undefined ? objectType : `-object_type-`)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId !== undefined ? objectId : `-object_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/custom_fields/{custom_field_id}/{object_type}/{object_id}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all custom fields in a given account
         * @summary List custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/custom_fields/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/custom_fields/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldApi - functional programming interface
 * @export
 */
export const CustomFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Update the custom field value for a specific object (either a person, car, asset, contract,..)
         * @summary Edit custom field value
         * @param {CustomFieldApiEditValueForObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editValueForObject(requestParameters: CustomFieldApiEditValueForObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldEditValueForObjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editValueForObject(requestParameters.customFieldId, requestParameters.objectType, requestParameters.objectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all custom fields in a given account
         * @summary List custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldListFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldApi - factory interface
 * @export
 */
export const CustomFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldApiFp(configuration)
    return {
        /**
         * Update the custom field value for a specific object (either a person, car, asset, contract,..)
         * @summary Edit custom field value
         * @param {CustomFieldApiEditValueForObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editValueForObject(requestParameters: CustomFieldApiEditValueForObjectRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldEditValueForObjectResponse> {
            return localVarFp.editValueForObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all custom fields in a given account
         * @summary List custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields(options?: AxiosRequestConfig): AxiosPromise<CustomFieldListFieldsResponse> {
            return localVarFp.listFields(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for editValueForObject operation in CustomFieldApi.
 * @export
 * @interface CustomFieldApiEditValueForObjectRequest
 */
export type CustomFieldApiEditValueForObjectRequest = {
    
    /**
    * Id of the custom field
    * @type {number}
    * @memberof CustomFieldApiEditValueForObject
    */
    readonly customFieldId: number
    
    /**
    * type of object to be edited. It can be: employee, asset, car, contract, software_license, training_participant, training
    * @type {string}
    * @memberof CustomFieldApiEditValueForObject
    */
    readonly objectType: string
    
    /**
    * ID of the object to be edited
    * @type {number}
    * @memberof CustomFieldApiEditValueForObject
    */
    readonly objectId: number
    
}

/**
 * CustomFieldApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldApiGenerated extends BaseAPI {
    /**
     * Update the custom field value for a specific object (either a person, car, asset, contract,..)
     * @summary Edit custom field value
     * @param {CustomFieldApiEditValueForObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApiGenerated
     */
    public editValueForObject(requestParameters: CustomFieldApiEditValueForObjectRequest, options?: AxiosRequestConfig) {
        return CustomFieldApiFp(this.configuration).editValueForObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all custom fields in a given account
     * @summary List custom fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApiGenerated
     */
    public listFields(options?: AxiosRequestConfig) {
        return CustomFieldApiFp(this.configuration).listFields(options).then((request) => request(this.axios, this.basePath));
    }
}
