/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DocumentGetDownloadUrlResponse } from '../models';
// @ts-ignore
import { DocumentRemoveResponse } from '../models';
// @ts-ignore
import { DocumentUploadDocument400Response } from '../models';
// @ts-ignore
import { DocumentUploadDocumentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DocumentApi - axios parameter creator
 * @export
 */
export const DocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API call returns a download url for a document
         * @summary Download document
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl: async (fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getDownloadUrl', 'fileId', fileId)
            const localVarPath = `/1.0/documents/{file_id}/download`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/documents/{file_id}/download',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API call lists up all documents related to a specific object
         * @summary List documents
         * @param {string} objectType pick one: employee, asset, car
         * @param {number} objectId 
         * @param {number} [page] Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelated: async (objectType: string, objectId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectType' is not null or undefined
            assertParamExists('listRelated', 'objectType', objectType)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('listRelated', 'objectId', objectId)
            const localVarPath = `/1.0/documents/{object_type}/{object_id}/list`
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType !== undefined ? objectType : `-object_type-`)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId !== undefined ? objectId : `-object_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/documents/{object_type}/{object_id}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete document
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('remove', 'fileId', fileId)
            const localVarPath = `/1.0/documents/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/documents/{file_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload document
         * @param {string} objectType pick one: employee, asset, car
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument: async (objectType: string, objectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectType' is not null or undefined
            assertParamExists('uploadDocument', 'objectType', objectType)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('uploadDocument', 'objectId', objectId)
            const localVarPath = `/1.0/documents/{object_type}/{object_id}/add`
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType !== undefined ? objectType : `-object_type-`)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId !== undefined ? objectId : `-object_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/documents/{object_type}/{object_id}/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentApi - functional programming interface
 * @export
 */
export const DocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * This API call returns a download url for a document
         * @summary Download document
         * @param {DocumentApiGetDownloadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadUrl(requestParameters: DocumentApiGetDownloadUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentGetDownloadUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadUrl(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API call lists up all documents related to a specific object
         * @summary List documents
         * @param {DocumentApiListRelatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelated(requestParameters: DocumentApiListRelatedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelated(requestParameters.objectType, requestParameters.objectId, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete document
         * @param {DocumentApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: DocumentApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload document
         * @param {DocumentApiUploadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocument(requestParameters: DocumentApiUploadDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentUploadDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocument(requestParameters.objectType, requestParameters.objectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentApi - factory interface
 * @export
 */
export const DocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentApiFp(configuration)
    return {
        /**
         * This API call returns a download url for a document
         * @summary Download document
         * @param {DocumentApiGetDownloadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl(requestParameters: DocumentApiGetDownloadUrlRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentGetDownloadUrlResponse> {
            return localVarFp.getDownloadUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API call lists up all documents related to a specific object
         * @summary List documents
         * @param {DocumentApiListRelatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelated(requestParameters: DocumentApiListRelatedRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listRelated(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete document
         * @param {DocumentApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: DocumentApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentRemoveResponse> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload document
         * @param {DocumentApiUploadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(requestParameters: DocumentApiUploadDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentUploadDocumentResponse> {
            return localVarFp.uploadDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDownloadUrl operation in DocumentApi.
 * @export
 * @interface DocumentApiGetDownloadUrlRequest
 */
export type DocumentApiGetDownloadUrlRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiGetDownloadUrl
    */
    readonly fileId: number
    
}

/**
 * Request parameters for listRelated operation in DocumentApi.
 * @export
 * @interface DocumentApiListRelatedRequest
 */
export type DocumentApiListRelatedRequest = {
    
    /**
    * pick one: employee, asset, car
    * @type {string}
    * @memberof DocumentApiListRelated
    */
    readonly objectType: string
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiListRelated
    */
    readonly objectId: number
    
    /**
    * Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
    * @type {number}
    * @memberof DocumentApiListRelated
    */
    readonly page?: number
    
}

/**
 * Request parameters for remove operation in DocumentApi.
 * @export
 * @interface DocumentApiRemoveRequest
 */
export type DocumentApiRemoveRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiRemove
    */
    readonly fileId: number
    
}

/**
 * Request parameters for uploadDocument operation in DocumentApi.
 * @export
 * @interface DocumentApiUploadDocumentRequest
 */
export type DocumentApiUploadDocumentRequest = {
    
    /**
    * pick one: employee, asset, car
    * @type {string}
    * @memberof DocumentApiUploadDocument
    */
    readonly objectType: string
    
    /**
    * 
    * @type {number}
    * @memberof DocumentApiUploadDocument
    */
    readonly objectId: number
    
}

/**
 * DocumentApiGenerated - object-oriented interface
 * @export
 * @class DocumentApiGenerated
 * @extends {BaseAPI}
 */
export class DocumentApiGenerated extends BaseAPI {
    /**
     * This API call returns a download url for a document
     * @summary Download document
     * @param {DocumentApiGetDownloadUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public getDownloadUrl(requestParameters: DocumentApiGetDownloadUrlRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).getDownloadUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API call lists up all documents related to a specific object
     * @summary List documents
     * @param {DocumentApiListRelatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public listRelated(requestParameters: DocumentApiListRelatedRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).listRelated(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete document
     * @param {DocumentApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public remove(requestParameters: DocumentApiRemoveRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload document
     * @param {DocumentApiUploadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public uploadDocument(requestParameters: DocumentApiUploadDocumentRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).uploadDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
