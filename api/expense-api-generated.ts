/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExpenseAddCategory400Response } from '../models';
// @ts-ignore
import { ExpenseAddCategoryRequest } from '../models';
// @ts-ignore
import { ExpenseAddCategoryResponse } from '../models';
// @ts-ignore
import { ExpenseAddExpenseWithCategory400Response } from '../models';
// @ts-ignore
import { ExpenseAddExpenseWithCategoryRequest } from '../models';
// @ts-ignore
import { ExpenseAddExpenseWithCategoryResponse } from '../models';
// @ts-ignore
import { ExpenseDeleteById400Response } from '../models';
// @ts-ignore
import { ExpenseDeleteByIdResponse } from '../models';
// @ts-ignore
import { ExpenseDeleteCategory400Response } from '../models';
// @ts-ignore
import { ExpenseDeleteCategoryResponse } from '../models';
// @ts-ignore
import { ExpenseEditCategoryName400Response } from '../models';
// @ts-ignore
import { ExpenseEditCategoryNameRequest } from '../models';
// @ts-ignore
import { ExpenseEditCategoryNameResponse } from '../models';
// @ts-ignore
import { ExpenseGetDetail400Response } from '../models';
// @ts-ignore
import { ExpenseGetDetailResponse } from '../models';
// @ts-ignore
import { ExpenseListByCategoryDetail400Response } from '../models';
// @ts-ignore
import { ExpenseListByCategoryDetailResponse } from '../models';
// @ts-ignore
import { ExpenseListByMonth400Response } from '../models';
// @ts-ignore
import { ExpenseListByMonthResponse } from '../models';
// @ts-ignore
import { ExpenseListByYear400Response } from '../models';
// @ts-ignore
import { ExpenseListByYearResponse } from '../models';
// @ts-ignore
import { ExpenseSetPayoutMethodAndStatus400Response } from '../models';
// @ts-ignore
import { ExpenseSetPayoutMethodAndStatusRequest } from '../models';
// @ts-ignore
import { ExpenseSetPayoutMethodAndStatusResponse } from '../models';
// @ts-ignore
import { ExpenseUpdateDetails400Response } from '../models';
// @ts-ignore
import { ExpenseUpdateDetailsRequest } from '../models';
// @ts-ignore
import { ExpenseUpdateDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExpenseApi - axios parameter creator
 * @export
 */
export const ExpenseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The api end-point to add an expense nd an optional category id
         * @summary Add expense category
         * @param {ExpenseAddCategoryRequest} [expenseAddCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (expenseAddCategoryRequest?: ExpenseAddCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/expenses/categories/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseAddCategoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/categories/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseAddCategoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The api end-point to add an expense nd an optional category id
         * @summary Add expense
         * @param {ExpenseAddExpenseWithCategoryRequest} [expenseAddExpenseWithCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpenseWithCategory: async (expenseAddExpenseWithCategoryRequest?: ExpenseAddExpenseWithCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/expenses/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseAddExpenseWithCategoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseAddExpenseWithCategoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete expense
         * @param {number} expenseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (expenseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('deleteById', 'expenseId', expenseId)
            const localVarPath = `/1.0/expenses/{expense_id}`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/{expense_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete expense category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteCategory', 'categoryId', categoryId)
            const localVarPath = `/1.0/expenses/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/categories/{category_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit expense category name
         * @param {number} categoryId 
         * @param {ExpenseEditCategoryNameRequest} [expenseEditCategoryNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCategoryName: async (categoryId: number, expenseEditCategoryNameRequest?: ExpenseEditCategoryNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('editCategoryName', 'categoryId', categoryId)
            const localVarPath = `/1.0/expenses/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseEditCategoryNameRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/categories/{category_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseEditCategoryNameRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all expenses
         * @summary Expense detail
         * @param {number} expenseId the specific id we want to see the details about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (expenseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('getDetail', 'expenseId', expenseId)
            const localVarPath = `/1.0/expenses/{expense_id}/detail`
                .replace(`{${"expense id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/{expense_id}/detail',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all expenses
         * @summary Expense category detail
         * @param {number} categoryId the specific id we want to see the details about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByCategoryDetail: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('listByCategoryDetail', 'categoryId', categoryId)
            const localVarPath = `/1.0/expenses/categories/{category_id}/detail`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-category_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/categories/{category_id}/detail',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all expenses
         * @summary List expenses by month
         * @param {string} year the specific year we want to filter
         * @param {string} month the specific month we want to filter this is optional
         * @param {string} [page] optional to filter pages
         * @param {number} [includeDeleted] this is so you can exclude any deleted expense, by default we show them (0 - 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByMonth: async (year: string, month: string, page?: string, includeDeleted?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('listByMonth', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('listByMonth', 'month', month)
            const localVarPath = `/1.0/expenses/list/{year}/{month}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['include_deleted'] = includeDeleted;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/list/{year}/{month}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all expenses
         * @summary List expenses by year
         * @param {string} year the specific year we want to filter
         * @param {string} month the specific month we want to filter this is optional
         * @param {string} [page] optional to filter pages
         * @param {number} [includeDeleted] this is so you can exclude any deleted expense, by default we show them (0 - 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByYear: async (year: string, month: string, page?: string, includeDeleted?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('listByYear', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('listByYear', 'month', month)
            const localVarPath = `/1.0/expenses/list/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['include_deleted'] = includeDeleted;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/list/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all expenses
         * @summary List expense categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/expenses/categories/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/categories/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set payout method and status
         * @param {number} expenseId 
         * @param {ExpenseSetPayoutMethodAndStatusRequest} [expenseSetPayoutMethodAndStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPayoutMethodAndStatus: async (expenseId: number, expenseSetPayoutMethodAndStatusRequest?: ExpenseSetPayoutMethodAndStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('setPayoutMethodAndStatus', 'expenseId', expenseId)
            const localVarPath = `/1.0/expenses/{expense_id}/updatePayout`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseSetPayoutMethodAndStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/{expense_id}/updatePayout',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseSetPayoutMethodAndStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit expense
         * @param {number} expenseId 
         * @param {ExpenseUpdateDetailsRequest} [expenseUpdateDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (expenseId: number, expenseUpdateDetailsRequest?: ExpenseUpdateDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('updateDetails', 'expenseId', expenseId)
            const localVarPath = `/1.0/expenses/{expense_id}`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseUpdateDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/expenses/{expense_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseUpdateDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseApi - functional programming interface
 * @export
 */
export const ExpenseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseApiAxiosParamCreator(configuration)
    return {
        /**
         * The api end-point to add an expense nd an optional category id
         * @summary Add expense category
         * @param {ExpenseApiAddCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(requestParameters: ExpenseApiAddCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseAddCategoryResponse>> {
            const expenseAddCategoryRequest: ExpenseAddCategoryRequest = {
                name: requestParameters.name,
                type: requestParameters.type,
                price-per-kilometer: requestParameters.price-per-kilometer,
                price-per-day: requestParameters.price-per-day
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(expenseAddCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The api end-point to add an expense nd an optional category id
         * @summary Add expense
         * @param {ExpenseApiAddExpenseWithCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExpenseWithCategory(requestParameters: ExpenseApiAddExpenseWithCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseAddExpenseWithCategoryResponse>> {
            const expenseAddExpenseWithCategoryRequest: ExpenseAddExpenseWithCategoryRequest = {
                description: requestParameters.description,
                employee_id: requestParameters.employee_id,
                category_id: requestParameters.category_id,
                amount: requestParameters.amount,
                extra_information: requestParameters.extra_information,
                date: requestParameters.date,
                filename: requestParameters.filename,
                file_base64: requestParameters.file_base64,
                dates: requestParameters.dates,
                distance: requestParameters.distance,
                ride: requestParameters.ride
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExpenseWithCategory(expenseAddExpenseWithCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete expense
         * @param {ExpenseApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ExpenseApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseDeleteByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.expenseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete expense category
         * @param {ExpenseApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(requestParameters: ExpenseApiDeleteCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseDeleteCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit expense category name
         * @param {ExpenseApiEditCategoryNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editCategoryName(requestParameters: ExpenseApiEditCategoryNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseEditCategoryNameResponse>> {
            const expenseEditCategoryNameRequest: ExpenseEditCategoryNameRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editCategoryName(requestParameters.categoryId, expenseEditCategoryNameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all expenses
         * @summary Expense detail
         * @param {ExpenseApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(requestParameters: ExpenseApiGetDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseGetDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(requestParameters.expenseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all expenses
         * @summary Expense category detail
         * @param {ExpenseApiListByCategoryDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByCategoryDetail(requestParameters: ExpenseApiListByCategoryDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseListByCategoryDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByCategoryDetail(requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all expenses
         * @summary List expenses by month
         * @param {ExpenseApiListByMonthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByMonth(requestParameters: ExpenseApiListByMonthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseListByMonthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByMonth(requestParameters.year, requestParameters.month, requestParameters.page, requestParameters.includeDeleted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all expenses
         * @summary List expenses by year
         * @param {ExpenseApiListByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByYear(requestParameters: ExpenseApiListByYearRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseListByYearResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByYear(requestParameters.year, requestParameters.month, requestParameters.page, requestParameters.includeDeleted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all expenses
         * @summary List expense categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set payout method and status
         * @param {ExpenseApiSetPayoutMethodAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPayoutMethodAndStatus(requestParameters: ExpenseApiSetPayoutMethodAndStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseSetPayoutMethodAndStatusResponse>> {
            const expenseSetPayoutMethodAndStatusRequest: ExpenseSetPayoutMethodAndStatusRequest = {
                new_payout_method: requestParameters.new_payout_method,
                payout_other_reason: requestParameters.payout_other_reason,
                payout_status: requestParameters.payout_status,
                period: requestParameters.period,
                year: requestParameters.year
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPayoutMethodAndStatus(requestParameters.expenseId, expenseSetPayoutMethodAndStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit expense
         * @param {ExpenseApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: ExpenseApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseUpdateDetailsResponse>> {
            const expenseUpdateDetailsRequest: ExpenseUpdateDetailsRequest = {
                category_id: requestParameters.category_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.expenseId, expenseUpdateDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpenseApi - factory interface
 * @export
 */
export const ExpenseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseApiFp(configuration)
    return {
        /**
         * The api end-point to add an expense nd an optional category id
         * @summary Add expense category
         * @param {ExpenseApiAddCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(requestParameters: ExpenseApiAddCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseAddCategoryResponse> {
            return localVarFp.addCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The api end-point to add an expense nd an optional category id
         * @summary Add expense
         * @param {ExpenseApiAddExpenseWithCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpenseWithCategory(requestParameters: ExpenseApiAddExpenseWithCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseAddExpenseWithCategoryResponse> {
            return localVarFp.addExpenseWithCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete expense
         * @param {ExpenseApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ExpenseApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseDeleteByIdResponse> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete expense category
         * @param {ExpenseApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(requestParameters: ExpenseApiDeleteCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseDeleteCategoryResponse> {
            return localVarFp.deleteCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit expense category name
         * @param {ExpenseApiEditCategoryNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCategoryName(requestParameters: ExpenseApiEditCategoryNameRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseEditCategoryNameResponse> {
            return localVarFp.editCategoryName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all expenses
         * @summary Expense detail
         * @param {ExpenseApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(requestParameters: ExpenseApiGetDetailRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseGetDetailResponse> {
            return localVarFp.getDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all expenses
         * @summary Expense category detail
         * @param {ExpenseApiListByCategoryDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByCategoryDetail(requestParameters: ExpenseApiListByCategoryDetailRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseListByCategoryDetailResponse> {
            return localVarFp.listByCategoryDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all expenses
         * @summary List expenses by month
         * @param {ExpenseApiListByMonthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByMonth(requestParameters: ExpenseApiListByMonthRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseListByMonthResponse> {
            return localVarFp.listByMonth(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all expenses
         * @summary List expenses by year
         * @param {ExpenseApiListByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByYear(requestParameters: ExpenseApiListByYearRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseListByYearResponse> {
            return localVarFp.listByYear(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all expenses
         * @summary List expense categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set payout method and status
         * @param {ExpenseApiSetPayoutMethodAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPayoutMethodAndStatus(requestParameters: ExpenseApiSetPayoutMethodAndStatusRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseSetPayoutMethodAndStatusResponse> {
            return localVarFp.setPayoutMethodAndStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit expense
         * @param {ExpenseApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: ExpenseApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseUpdateDetailsResponse> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCategory operation in ExpenseApi.
 * @export
 * @interface ExpenseApiAddCategoryRequest
 */
export type ExpenseApiAddCategoryRequest = {
    
} & ExpenseAddCategoryRequest

/**
 * Request parameters for addExpenseWithCategory operation in ExpenseApi.
 * @export
 * @interface ExpenseApiAddExpenseWithCategoryRequest
 */
export type ExpenseApiAddExpenseWithCategoryRequest = {
    
} & ExpenseAddExpenseWithCategoryRequest

/**
 * Request parameters for deleteById operation in ExpenseApi.
 * @export
 * @interface ExpenseApiDeleteByIdRequest
 */
export type ExpenseApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ExpenseApiDeleteById
    */
    readonly expenseId: number
    
}

/**
 * Request parameters for deleteCategory operation in ExpenseApi.
 * @export
 * @interface ExpenseApiDeleteCategoryRequest
 */
export type ExpenseApiDeleteCategoryRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ExpenseApiDeleteCategory
    */
    readonly categoryId: number
    
}

/**
 * Request parameters for editCategoryName operation in ExpenseApi.
 * @export
 * @interface ExpenseApiEditCategoryNameRequest
 */
export type ExpenseApiEditCategoryNameRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ExpenseApiEditCategoryName
    */
    readonly categoryId: number
    
} & ExpenseEditCategoryNameRequest

/**
 * Request parameters for getDetail operation in ExpenseApi.
 * @export
 * @interface ExpenseApiGetDetailRequest
 */
export type ExpenseApiGetDetailRequest = {
    
    /**
    * the specific id we want to see the details about
    * @type {number}
    * @memberof ExpenseApiGetDetail
    */
    readonly expenseId: number
    
}

/**
 * Request parameters for listByCategoryDetail operation in ExpenseApi.
 * @export
 * @interface ExpenseApiListByCategoryDetailRequest
 */
export type ExpenseApiListByCategoryDetailRequest = {
    
    /**
    * the specific id we want to see the details about
    * @type {number}
    * @memberof ExpenseApiListByCategoryDetail
    */
    readonly categoryId: number
    
}

/**
 * Request parameters for listByMonth operation in ExpenseApi.
 * @export
 * @interface ExpenseApiListByMonthRequest
 */
export type ExpenseApiListByMonthRequest = {
    
    /**
    * the specific year we want to filter
    * @type {string}
    * @memberof ExpenseApiListByMonth
    */
    readonly year: string
    
    /**
    * the specific month we want to filter this is optional
    * @type {string}
    * @memberof ExpenseApiListByMonth
    */
    readonly month: string
    
    /**
    * optional to filter pages
    * @type {string}
    * @memberof ExpenseApiListByMonth
    */
    readonly page?: string
    
    /**
    * this is so you can exclude any deleted expense, by default we show them (0 - 1)
    * @type {number}
    * @memberof ExpenseApiListByMonth
    */
    readonly includeDeleted?: number
    
}

/**
 * Request parameters for listByYear operation in ExpenseApi.
 * @export
 * @interface ExpenseApiListByYearRequest
 */
export type ExpenseApiListByYearRequest = {
    
    /**
    * the specific year we want to filter
    * @type {string}
    * @memberof ExpenseApiListByYear
    */
    readonly year: string
    
    /**
    * the specific month we want to filter this is optional
    * @type {string}
    * @memberof ExpenseApiListByYear
    */
    readonly month: string
    
    /**
    * optional to filter pages
    * @type {string}
    * @memberof ExpenseApiListByYear
    */
    readonly page?: string
    
    /**
    * this is so you can exclude any deleted expense, by default we show them (0 - 1)
    * @type {number}
    * @memberof ExpenseApiListByYear
    */
    readonly includeDeleted?: number
    
}

/**
 * Request parameters for setPayoutMethodAndStatus operation in ExpenseApi.
 * @export
 * @interface ExpenseApiSetPayoutMethodAndStatusRequest
 */
export type ExpenseApiSetPayoutMethodAndStatusRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ExpenseApiSetPayoutMethodAndStatus
    */
    readonly expenseId: number
    
} & ExpenseSetPayoutMethodAndStatusRequest

/**
 * Request parameters for updateDetails operation in ExpenseApi.
 * @export
 * @interface ExpenseApiUpdateDetailsRequest
 */
export type ExpenseApiUpdateDetailsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ExpenseApiUpdateDetails
    */
    readonly expenseId: number
    
} & ExpenseUpdateDetailsRequest

/**
 * ExpenseApiGenerated - object-oriented interface
 * @export
 * @class ExpenseApiGenerated
 * @extends {BaseAPI}
 */
export class ExpenseApiGenerated extends BaseAPI {
    /**
     * The api end-point to add an expense nd an optional category id
     * @summary Add expense category
     * @param {ExpenseApiAddCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public addCategory(requestParameters: ExpenseApiAddCategoryRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).addCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The api end-point to add an expense nd an optional category id
     * @summary Add expense
     * @param {ExpenseApiAddExpenseWithCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public addExpenseWithCategory(requestParameters: ExpenseApiAddExpenseWithCategoryRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).addExpenseWithCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete expense
     * @param {ExpenseApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public deleteById(requestParameters: ExpenseApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete expense category
     * @param {ExpenseApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public deleteCategory(requestParameters: ExpenseApiDeleteCategoryRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).deleteCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit expense category name
     * @param {ExpenseApiEditCategoryNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public editCategoryName(requestParameters: ExpenseApiEditCategoryNameRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).editCategoryName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all expenses
     * @summary Expense detail
     * @param {ExpenseApiGetDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public getDetail(requestParameters: ExpenseApiGetDetailRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).getDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all expenses
     * @summary Expense category detail
     * @param {ExpenseApiListByCategoryDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public listByCategoryDetail(requestParameters: ExpenseApiListByCategoryDetailRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).listByCategoryDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all expenses
     * @summary List expenses by month
     * @param {ExpenseApiListByMonthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public listByMonth(requestParameters: ExpenseApiListByMonthRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).listByMonth(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all expenses
     * @summary List expenses by year
     * @param {ExpenseApiListByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public listByYear(requestParameters: ExpenseApiListByYearRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).listByYear(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all expenses
     * @summary List expense categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public listCategories(options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).listCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set payout method and status
     * @param {ExpenseApiSetPayoutMethodAndStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public setPayoutMethodAndStatus(requestParameters: ExpenseApiSetPayoutMethodAndStatusRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).setPayoutMethodAndStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit expense
     * @param {ExpenseApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApiGenerated
     */
    public updateDetails(requestParameters: ExpenseApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
