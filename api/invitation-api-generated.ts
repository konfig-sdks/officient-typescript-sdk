/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InvitationGenerateSecretUrlRequest } from '../models';
// @ts-ignore
import { InvitationGenerateSecretUrlResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InvitationApi - axios parameter creator
 * @export
 */
export const InvitationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a secret URL that brings a person straight to the HR self-service platform.
         * @summary Self-service invitation
         * @param {InvitationGenerateSecretUrlRequest} [invitationGenerateSecretUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSecretUrl: async (invitationGenerateSecretUrlRequest?: InvitationGenerateSecretUrlRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/people/selfservice/invite_link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invitationGenerateSecretUrlRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/selfservice/invite_link',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invitationGenerateSecretUrlRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitationApi - functional programming interface
 * @export
 */
export const InvitationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitationApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a secret URL that brings a person straight to the HR self-service platform.
         * @summary Self-service invitation
         * @param {InvitationApiGenerateSecretUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSecretUrl(requestParameters: InvitationApiGenerateSecretUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationGenerateSecretUrlResponse>> {
            const invitationGenerateSecretUrlRequest: InvitationGenerateSecretUrlRequest = {
                person_id: requestParameters.person_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSecretUrl(invitationGenerateSecretUrlRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvitationApi - factory interface
 * @export
 */
export const InvitationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvitationApiFp(configuration)
    return {
        /**
         * Generate a secret URL that brings a person straight to the HR self-service platform.
         * @summary Self-service invitation
         * @param {InvitationApiGenerateSecretUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSecretUrl(requestParameters: InvitationApiGenerateSecretUrlRequest, options?: AxiosRequestConfig): AxiosPromise<InvitationGenerateSecretUrlResponse> {
            return localVarFp.generateSecretUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateSecretUrl operation in InvitationApi.
 * @export
 * @interface InvitationApiGenerateSecretUrlRequest
 */
export type InvitationApiGenerateSecretUrlRequest = {
    
} & InvitationGenerateSecretUrlRequest

/**
 * InvitationApiGenerated - object-oriented interface
 * @export
 * @class InvitationApiGenerated
 * @extends {BaseAPI}
 */
export class InvitationApiGenerated extends BaseAPI {
    /**
     * Generate a secret URL that brings a person straight to the HR self-service platform.
     * @summary Self-service invitation
     * @param {InvitationApiGenerateSecretUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApiGenerated
     */
    public generateSecretUrl(requestParameters: InvitationApiGenerateSecretUrlRequest, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).generateSecretUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
