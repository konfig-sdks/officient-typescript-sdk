/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PersonAddNewResponse } from '../models';
// @ts-ignore
import { PersonAddToCalendar200Response } from '../models';
// @ts-ignore
import { PersonAddToCalendar400Response } from '../models';
// @ts-ignore
import { PersonAddToCalendarResponse } from '../models';
// @ts-ignore
import { PersonEditDetail400Response } from '../models';
// @ts-ignore
import { PersonEditDetailResponse } from '../models';
// @ts-ignore
import { PersonGetBudgetsByYearResponse } from '../models';
// @ts-ignore
import { PersonGetCurrentWageResponse } from '../models';
// @ts-ignore
import { PersonGetCurrentWeeklySchedule400Response } from '../models';
// @ts-ignore
import { PersonGetCustomFields400Response } from '../models';
// @ts-ignore
import { PersonGetCustomFieldsResponse } from '../models';
// @ts-ignore
import { PersonGetDailyCalendarResponse } from '../models';
// @ts-ignore
import { PersonGetDetailResponse } from '../models';
// @ts-ignore
import { PersonGetEventTypeLimitsResponse } from '../models';
// @ts-ignore
import { PersonGetManagerDetails400Response } from '../models';
// @ts-ignore
import { PersonGetManagerDetailsResponse } from '../models';
// @ts-ignore
import { PersonGetMonthlyCalendarResponse } from '../models';
// @ts-ignore
import { PersonGetOneOffWageComponentsByMonthResponse } from '../models';
// @ts-ignore
import { PersonGetPersonalDataChangesResponse } from '../models';
// @ts-ignore
import { PersonGetVerzuimPeriods400Response } from '../models';
// @ts-ignore
import { PersonGetVerzuimPeriodsResponse } from '../models';
// @ts-ignore
import { PersonGetWageHistoryResponse } from '../models';
// @ts-ignore
import { PersonGetYearlyCalendarResponse } from '../models';
// @ts-ignore
import { PersonListAvailableComponentsResponse } from '../models';
// @ts-ignore
import { PersonListBudgetItemsResponse } from '../models';
// @ts-ignore
import { PersonListDimonasByPerson400Response } from '../models';
// @ts-ignore
import { PersonListDimonasByPersonResponse } from '../models';
// @ts-ignore
import { PersonListPeopleResponse } from '../models';
// @ts-ignore
import { PersonOverwriteEventResponse } from '../models';
// @ts-ignore
import { PersonRemoveEvent400Response } from '../models';
// @ts-ignore
import { PersonRemoveEventResponse } from '../models';
// @ts-ignore
import { PersonSearchByCriteriaResponseInner } from '../models';
// @ts-ignore
import { PersonSetFunctionDescription400Response } from '../models';
// @ts-ignore
import { PersonSetFunctionDescriptionResponse } from '../models';
// @ts-ignore
import { PersonUpdateBulkTimeWorked400Response } from '../models';
// @ts-ignore
import { PersonUpdateBulkTimeWorkedResponse } from '../models';
// @ts-ignore
import { PersonUpdateEventTypeLimit400Response } from '../models';
// @ts-ignore
import { PersonUpdateEventTypeLimitResponse } from '../models';
// @ts-ignore
import { PersonUpdateManager400Response } from '../models';
// @ts-ignore
import { PersonUpdateManagerResponse } from '../models';
// @ts-ignore
import { PersonUpdateTimeWorked400Response } from '../models';
// @ts-ignore
import { PersonUpdateTimeWorkedResponse } from '../models';
// @ts-ignore
import { PersonUploadAvatarResponse } from '../models';
// @ts-ignore
import { PersonViewRoleHistoryResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new person to Officient
         * @summary Add person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/people/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add new events to a calender (eg a day off, overtime,..)
         * @summary Add event
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCalendar: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('addToCalendar', 'personId', personId)
            const localVarPath = `/1.0/calendar/{person_id}/events/add`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/events/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds events to a person\'s calendar based on a priority scheme of event types
         * @summary Use priority scheme
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCalendar_1: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('addToCalendar_1', 'personId', personId)
            const localVarPath = `/1.0/calendar/{person_id}/priorityschemes/events/add`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/priorityschemes/events/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit person
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDetail: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('editDetail', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/detail`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/detail',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of budgets for a given person and year.
         * @summary List budgets
         * @param {number} personId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsByYear: async (personId: number, year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getBudgetsByYear', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getBudgetsByYear', 'year', year)
            const localVarPath = `/1.0/budgets/people/{person_id}/{year}/list`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/budgets/people/{person_id}/{year}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current wage details for one person
         * @summary Current wage
         * @param {string} personId The person you would like to receive wage information on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentWage: async (personId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getCurrentWage', 'personId', personId)
            const localVarPath = `/1.0/wages/{person_id}/current`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/wages/{person_id}/current',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Weekly schedule
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentWeeklySchedule: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getCurrentWeeklySchedule', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/weekly_schedule/current`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/weekly_schedule/current',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Person custom fields
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getCustomFields', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/custom_fields`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the time off, overtime & scheduled time for a single person for a single day
         * @summary Daily calendar
         * @param {number} personId The person you would like to receive calender information on
         * @param {number} year 
         * @param {number} month 
         * @param {number} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyCalendar: async (personId: number, year: number, month: number, day: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getDailyCalendar', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getDailyCalendar', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getDailyCalendar', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getDailyCalendar', 'day', day)
            const localVarPath = `/1.0/calendar/{person_id}/{year}/{month}/{day}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Person detail
         * @param {string} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (personId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getDetail', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/detail`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/detail',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API can tell how many days off a certain person has in a certain year
         * @summary Event type limits
         * @param {number} personId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventTypeLimits: async (personId: number, year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getEventTypeLimits', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEventTypeLimits', 'year', year)
            const localVarPath = `/1.0/calendar/{person_id}/events/types/{year}/limits`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/events/types/{year}/limits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Person manager
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagerDetails: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getManagerDetails', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/manager`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/manager',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the time off, overtime & scheduled time for a single person for an entire month
         * @summary Monthly calendar
         * @param {number} personId The person you would like to receive calender information on
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyCalendar: async (personId: number, year: number, month: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getMonthlyCalendar', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getMonthlyCalendar', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getMonthlyCalendar', 'month', month)
            const localVarPath = `/1.0/calendar/{person_id}/{year}/{month}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}/{month}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the one-off wage components that are granted to a person on a specific month
         * @summary Components by person by month
         * @param {number} personId 
         * @param {number} year 
         * @param {number} month 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneOffWageComponentsByMonth: async (personId: number, year: number, month: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getOneOffWageComponentsByMonth', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getOneOffWageComponentsByMonth', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getOneOffWageComponentsByMonth', 'month', month)
            const localVarPath = `/1.0/wages/one_off/components/{person_id}/{year}/{month}/list`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/wages/one_off/components/{person_id}/{year}/{month}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * show metadata for performance reviews by person. No content (notes,..) are exposed
         * @summary List performance reviews
         * @param {number} page Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerformanceReviewsByPerson: async (page: number, personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getPerformanceReviewsByPerson', 'page', page)
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getPerformanceReviewsByPerson', 'personId', personId)
            const localVarPath = `/1.0/performance_reviews/{person_id}/list`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/performance_reviews/{person_id}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the latest delta of changes to personal data
         * @summary Personal data audit log
         * @param {string} [sinceTimestamp] Defaults to 1 week ago
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalDataChanges: async (sinceTimestamp?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/people/change_history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (sinceTimestamp !== undefined) {
                localVarQueryParameter['since_timestamp'] = (sinceTimestamp as any instanceof Date) ?
                    (sinceTimestamp as any).toISOString() :
                    sinceTimestamp;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/change_history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List verzuim periods
         * @param {number} personId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerzuimPeriods: async (personId: number, year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getVerzuimPeriods', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getVerzuimPeriods', 'year', year)
            const localVarPath = `/1.0/calendar/{person_id}/verzuim/{year}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/verzuim/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the entire wage history for one person
         * @summary Wage history
         * @param {string} personId The person you need the wage history for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWageHistory: async (personId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getWageHistory', 'personId', personId)
            const localVarPath = `/1.0/wages/{person_id}/history`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/wages/{person_id}/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the time off, overtime & scheduled time for a single person for an entire year
         * @summary Yearly calendar
         * @param {number} personId The person you would like to receive calender information on
         * @param {number} year 
         * @param {string} [filter] can be either \&#39;all\&#39; or \&#39;days_with_events\&#39; to return only days containing events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYearlyCalendar: async (personId: number, year: number, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getYearlyCalendar', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getYearlyCalendar', 'year', year)
            const localVarPath = `/1.0/calendar/{person_id}/{year}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of available one-off wage components (eg bonus, expense compensation,..) for a specific person.
         * @summary List available components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableComponents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/wages/one_off/components/{person_id}/options/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/wages/one_off/components/{person_id}/options/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the items that are in a given budget.
         * @summary List budget items
         * @param {number} personId 
         * @param {number} budgetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBudgetItems: async (personId: number, budgetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('listBudgetItems', 'personId', personId)
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('listBudgetItems', 'budgetId', budgetId)
            const localVarPath = `/1.0/budgets/people/{person_id}/{budget_id}/items/list`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId !== undefined ? budgetId : `-budget_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/budgets/people/{person_id}/{budget_id}/items/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Belgium only: this API allows you to list all historical DIMONA information for one person
         * @summary List dimonas by person
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDimonasByPerson: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('listDimonasByPerson', 'personId', personId)
            const localVarPath = `/1.0/legal/dimonas/{person_id}/list`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/legal/dimonas/{person_id}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List people
         * @param {number} page Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
         * @param {number} [includeArchived] Include archived people in response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPeople: async (page: number, includeArchived?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('listPeople', 'page', page)
            const localVarPath = `/1.0/people/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (includeArchived !== undefined) {
                localVarQueryParameter['include_archived'] = includeArchived;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new event or overwrite an existing one in a personal calender (eg a day off, overtime,..)
         * @summary Overwrite event
         * @param {string} personId 
         * @param {string} year 
         * @param {string} month 
         * @param {string} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overwriteEvent: async (personId: string, year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('overwriteEvent', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('overwriteEvent', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('overwriteEvent', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('overwriteEvent', 'day', day)
            const localVarPath = `/1.0/calendar/{person_id}/{year}/{month}/{day}/events/set`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}/{month}/{day}/events/set',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an event from the calender, such as a day off
         * @summary Delete event
         * @param {number} personId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEvent: async (personId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('removeEvent', 'personId', personId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('removeEvent', 'eventId', eventId)
            const localVarPath = `/1.0/calendar/{person_id}/events/{event_id}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"event_id"}}`, encodeURIComponent(String(eventId !== undefined ? eventId : `-event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/events/{event_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * reset the time worked on a given day to the regular work schedule for one person
         * @summary Reset time worked
         * @param {number} personId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTimeWorked: async (personId: number, year: number, month: number, day: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('resetTimeWorked', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('resetTimeWorked', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('resetTimeWorked', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('resetTimeWorked', 'day', day)
            const localVarPath = `/1.0/calendar/{person_id}/{year}/{month}/{day}/work/reset`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}/{month}/{day}/work/reset',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * search people by name, email or national number
         * @summary Search people
         * @param {string} [name] eg John Doe
         * @param {string} [email] eg john@doe.net
         * @param {string} [nationalNumber] eg 82146126684
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByCriteria: async (name?: string, email?: string, nationalNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/people/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (nationalNumber !== undefined) {
                localVarQueryParameter['national_number'] = nationalNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the function description for each person
         * @summary Update role
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFunctionDescription: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('setFunctionDescription', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/role`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/role',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overwrite the amount of time worked for a set of days in bulk (eg for timetracking software integrations)
         * @summary Update time worked in bulk
         * @param {number} personId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBulkTimeWorked: async (personId: number, year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updateBulkTimeWorked', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('updateBulkTimeWorked', 'year', year)
            const localVarPath = `/1.0/calendar/{person_id}/{year}/work/bulk`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}/work/bulk',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API can update the limitations for a specific event type
         * @summary Set event type limit
         * @param {number} personId 
         * @param {number} year 
         * @param {number} typeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventTypeLimit: async (personId: number, year: number, typeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updateEventTypeLimit', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('updateEventTypeLimit', 'year', year)
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('updateEventTypeLimit', 'typeId', typeId)
            const localVarPath = `/1.0/calendar/{person_id}/events/types/{year}/limits/{type_id}/set`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"type_id"}}`, encodeURIComponent(String(typeId !== undefined ? typeId : `-type_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/events/types/{year}/limits/{type_id}/set',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Who reports to who?
         * @summary Update manager
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManager: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updateManager', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/manager`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/manager',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overwrite the amount of time worked on a certain day (eg for timetracking software integrations)
         * @summary Update time worked
         * @param {number} personId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} day 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeWorked: async (personId: number, year: number, month: number, day: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updateTimeWorked', 'personId', personId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('updateTimeWorked', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('updateTimeWorked', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('updateTimeWorked', 'day', day)
            const localVarPath = `/1.0/calendar/{person_id}/{year}/{month}/{day}/work`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/{person_id}/{year}/{month}/{day}/work',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * upload a photo of this person
         * @summary Upload avatar
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAvatar: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('uploadAvatar', 'personId', personId)
            const localVarPath = `/1.0/people/{person_id}/photo`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/people/{person_id}/photo',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View the role history for one person
         * @summary Role History
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRoleHistory: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('viewRoleHistory', 'personId', personId)
            const localVarPath = `/1.0/roles/{person_id}/history`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-person_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/roles/{person_id}/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new person to Officient
         * @summary Add person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNew(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonAddNewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNew(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add new events to a calender (eg a day off, overtime,..)
         * @summary Add event
         * @param {PersonApiAddToCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCalendar(requestParameters: PersonApiAddToCalendarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonAddToCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCalendar(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds events to a person\'s calendar based on a priority scheme of event types
         * @summary Use priority scheme
         * @param {PersonApiAddToCalendar0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCalendar_1(requestParameters: PersonApiAddToCalendar0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonAddToCalendar200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCalendar_1(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit person
         * @param {PersonApiEditDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editDetail(requestParameters: PersonApiEditDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonEditDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editDetail(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a list of budgets for a given person and year.
         * @summary List budgets
         * @param {PersonApiGetBudgetsByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBudgetsByYear(requestParameters: PersonApiGetBudgetsByYearRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetBudgetsByYearResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBudgetsByYear(requestParameters.personId, requestParameters.year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current wage details for one person
         * @summary Current wage
         * @param {PersonApiGetCurrentWageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentWage(requestParameters: PersonApiGetCurrentWageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetCurrentWageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentWage(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Weekly schedule
         * @param {PersonApiGetCurrentWeeklyScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentWeeklySchedule(requestParameters: PersonApiGetCurrentWeeklyScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentWeeklySchedule(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Person custom fields
         * @param {PersonApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: PersonApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the time off, overtime & scheduled time for a single person for a single day
         * @summary Daily calendar
         * @param {PersonApiGetDailyCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyCalendar(requestParameters: PersonApiGetDailyCalendarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetDailyCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyCalendar(requestParameters.personId, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Person detail
         * @param {PersonApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(requestParameters: PersonApiGetDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API can tell how many days off a certain person has in a certain year
         * @summary Event type limits
         * @param {PersonApiGetEventTypeLimitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventTypeLimits(requestParameters: PersonApiGetEventTypeLimitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetEventTypeLimitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventTypeLimits(requestParameters.personId, requestParameters.year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Person manager
         * @param {PersonApiGetManagerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagerDetails(requestParameters: PersonApiGetManagerDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetManagerDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagerDetails(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the time off, overtime & scheduled time for a single person for an entire month
         * @summary Monthly calendar
         * @param {PersonApiGetMonthlyCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonthlyCalendar(requestParameters: PersonApiGetMonthlyCalendarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetMonthlyCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthlyCalendar(requestParameters.personId, requestParameters.year, requestParameters.month, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the one-off wage components that are granted to a person on a specific month
         * @summary Components by person by month
         * @param {PersonApiGetOneOffWageComponentsByMonthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneOffWageComponentsByMonth(requestParameters: PersonApiGetOneOffWageComponentsByMonthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetOneOffWageComponentsByMonthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneOffWageComponentsByMonth(requestParameters.personId, requestParameters.year, requestParameters.month, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * show metadata for performance reviews by person. No content (notes,..) are exposed
         * @summary List performance reviews
         * @param {PersonApiGetPerformanceReviewsByPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerformanceReviewsByPerson(requestParameters: PersonApiGetPerformanceReviewsByPersonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPerformanceReviewsByPerson(requestParameters.page, requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the latest delta of changes to personal data
         * @summary Personal data audit log
         * @param {PersonApiGetPersonalDataChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalDataChanges(requestParameters: PersonApiGetPersonalDataChangesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetPersonalDataChangesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalDataChanges(requestParameters.sinceTimestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List verzuim periods
         * @param {PersonApiGetVerzuimPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerzuimPeriods(requestParameters: PersonApiGetVerzuimPeriodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetVerzuimPeriodsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerzuimPeriods(requestParameters.personId, requestParameters.year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the entire wage history for one person
         * @summary Wage history
         * @param {PersonApiGetWageHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWageHistory(requestParameters: PersonApiGetWageHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetWageHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWageHistory(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the time off, overtime & scheduled time for a single person for an entire year
         * @summary Yearly calendar
         * @param {PersonApiGetYearlyCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getYearlyCalendar(requestParameters: PersonApiGetYearlyCalendarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonGetYearlyCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getYearlyCalendar(requestParameters.personId, requestParameters.year, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a list of available one-off wage components (eg bonus, expense compensation,..) for a specific person.
         * @summary List available components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableComponents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonListAvailableComponentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableComponents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the items that are in a given budget.
         * @summary List budget items
         * @param {PersonApiListBudgetItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBudgetItems(requestParameters: PersonApiListBudgetItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonListBudgetItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBudgetItems(requestParameters.personId, requestParameters.budgetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Belgium only: this API allows you to list all historical DIMONA information for one person
         * @summary List dimonas by person
         * @param {PersonApiListDimonasByPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDimonasByPerson(requestParameters: PersonApiListDimonasByPersonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonListDimonasByPersonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDimonasByPerson(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List people
         * @param {PersonApiListPeopleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPeople(requestParameters: PersonApiListPeopleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonListPeopleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPeople(requestParameters.page, requestParameters.includeArchived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new event or overwrite an existing one in a personal calender (eg a day off, overtime,..)
         * @summary Overwrite event
         * @param {PersonApiOverwriteEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async overwriteEvent(requestParameters: PersonApiOverwriteEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonOverwriteEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.overwriteEvent(requestParameters.personId, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an event from the calender, such as a day off
         * @summary Delete event
         * @param {PersonApiRemoveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEvent(requestParameters: PersonApiRemoveEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonRemoveEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEvent(requestParameters.personId, requestParameters.eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * reset the time worked on a given day to the regular work schedule for one person
         * @summary Reset time worked
         * @param {PersonApiResetTimeWorkedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetTimeWorked(requestParameters: PersonApiResetTimeWorkedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetTimeWorked(requestParameters.personId, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * search people by name, email or national number
         * @summary Search people
         * @param {PersonApiSearchByCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByCriteria(requestParameters: PersonApiSearchByCriteriaRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonSearchByCriteriaResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByCriteria(requestParameters.name, requestParameters.email, requestParameters.nationalNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the function description for each person
         * @summary Update role
         * @param {PersonApiSetFunctionDescriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setFunctionDescription(requestParameters: PersonApiSetFunctionDescriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonSetFunctionDescriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setFunctionDescription(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Overwrite the amount of time worked for a set of days in bulk (eg for timetracking software integrations)
         * @summary Update time worked in bulk
         * @param {PersonApiUpdateBulkTimeWorkedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBulkTimeWorked(requestParameters: PersonApiUpdateBulkTimeWorkedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonUpdateBulkTimeWorkedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBulkTimeWorked(requestParameters.personId, requestParameters.year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API can update the limitations for a specific event type
         * @summary Set event type limit
         * @param {PersonApiUpdateEventTypeLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventTypeLimit(requestParameters: PersonApiUpdateEventTypeLimitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonUpdateEventTypeLimitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventTypeLimit(requestParameters.personId, requestParameters.year, requestParameters.typeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Who reports to who?
         * @summary Update manager
         * @param {PersonApiUpdateManagerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManager(requestParameters: PersonApiUpdateManagerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonUpdateManagerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManager(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Overwrite the amount of time worked on a certain day (eg for timetracking software integrations)
         * @summary Update time worked
         * @param {PersonApiUpdateTimeWorkedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimeWorked(requestParameters: PersonApiUpdateTimeWorkedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonUpdateTimeWorkedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimeWorked(requestParameters.personId, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * upload a photo of this person
         * @summary Upload avatar
         * @param {PersonApiUploadAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAvatar(requestParameters: PersonApiUploadAvatarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonUploadAvatarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAvatar(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * View the role history for one person
         * @summary Role History
         * @param {PersonApiViewRoleHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewRoleHistory(requestParameters: PersonApiViewRoleHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonViewRoleHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewRoleHistory(requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonApiFp(configuration)
    return {
        /**
         * Add a new person to Officient
         * @summary Add person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew(options?: AxiosRequestConfig): AxiosPromise<PersonAddNewResponse> {
            return localVarFp.addNew(options).then((request) => request(axios, basePath));
        },
        /**
         * Add new events to a calender (eg a day off, overtime,..)
         * @summary Add event
         * @param {PersonApiAddToCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCalendar(requestParameters: PersonApiAddToCalendarRequest, options?: AxiosRequestConfig): AxiosPromise<PersonAddToCalendarResponse> {
            return localVarFp.addToCalendar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds events to a person\'s calendar based on a priority scheme of event types
         * @summary Use priority scheme
         * @param {PersonApiAddToCalendar0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCalendar_1(requestParameters: PersonApiAddToCalendar0Request, options?: AxiosRequestConfig): AxiosPromise<PersonAddToCalendar200Response> {
            return localVarFp.addToCalendar_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit person
         * @param {PersonApiEditDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDetail(requestParameters: PersonApiEditDetailRequest, options?: AxiosRequestConfig): AxiosPromise<PersonEditDetailResponse> {
            return localVarFp.editDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of budgets for a given person and year.
         * @summary List budgets
         * @param {PersonApiGetBudgetsByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsByYear(requestParameters: PersonApiGetBudgetsByYearRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetBudgetsByYearResponse> {
            return localVarFp.getBudgetsByYear(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current wage details for one person
         * @summary Current wage
         * @param {PersonApiGetCurrentWageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentWage(requestParameters: PersonApiGetCurrentWageRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetCurrentWageResponse> {
            return localVarFp.getCurrentWage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Weekly schedule
         * @param {PersonApiGetCurrentWeeklyScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentWeeklySchedule(requestParameters: PersonApiGetCurrentWeeklyScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getCurrentWeeklySchedule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Person custom fields
         * @param {PersonApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: PersonApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetCustomFieldsResponse> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the time off, overtime & scheduled time for a single person for a single day
         * @summary Daily calendar
         * @param {PersonApiGetDailyCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyCalendar(requestParameters: PersonApiGetDailyCalendarRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetDailyCalendarResponse> {
            return localVarFp.getDailyCalendar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Person detail
         * @param {PersonApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(requestParameters: PersonApiGetDetailRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetDetailResponse> {
            return localVarFp.getDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API can tell how many days off a certain person has in a certain year
         * @summary Event type limits
         * @param {PersonApiGetEventTypeLimitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventTypeLimits(requestParameters: PersonApiGetEventTypeLimitsRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetEventTypeLimitsResponse> {
            return localVarFp.getEventTypeLimits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Person manager
         * @param {PersonApiGetManagerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagerDetails(requestParameters: PersonApiGetManagerDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetManagerDetailsResponse> {
            return localVarFp.getManagerDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the time off, overtime & scheduled time for a single person for an entire month
         * @summary Monthly calendar
         * @param {PersonApiGetMonthlyCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyCalendar(requestParameters: PersonApiGetMonthlyCalendarRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetMonthlyCalendarResponse> {
            return localVarFp.getMonthlyCalendar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the one-off wage components that are granted to a person on a specific month
         * @summary Components by person by month
         * @param {PersonApiGetOneOffWageComponentsByMonthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneOffWageComponentsByMonth(requestParameters: PersonApiGetOneOffWageComponentsByMonthRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetOneOffWageComponentsByMonthResponse> {
            return localVarFp.getOneOffWageComponentsByMonth(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * show metadata for performance reviews by person. No content (notes,..) are exposed
         * @summary List performance reviews
         * @param {PersonApiGetPerformanceReviewsByPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerformanceReviewsByPerson(requestParameters: PersonApiGetPerformanceReviewsByPersonRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getPerformanceReviewsByPerson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the latest delta of changes to personal data
         * @summary Personal data audit log
         * @param {PersonApiGetPersonalDataChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalDataChanges(requestParameters: PersonApiGetPersonalDataChangesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PersonGetPersonalDataChangesResponse> {
            return localVarFp.getPersonalDataChanges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List verzuim periods
         * @param {PersonApiGetVerzuimPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerzuimPeriods(requestParameters: PersonApiGetVerzuimPeriodsRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetVerzuimPeriodsResponse> {
            return localVarFp.getVerzuimPeriods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the entire wage history for one person
         * @summary Wage history
         * @param {PersonApiGetWageHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWageHistory(requestParameters: PersonApiGetWageHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetWageHistoryResponse> {
            return localVarFp.getWageHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the time off, overtime & scheduled time for a single person for an entire year
         * @summary Yearly calendar
         * @param {PersonApiGetYearlyCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYearlyCalendar(requestParameters: PersonApiGetYearlyCalendarRequest, options?: AxiosRequestConfig): AxiosPromise<PersonGetYearlyCalendarResponse> {
            return localVarFp.getYearlyCalendar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of available one-off wage components (eg bonus, expense compensation,..) for a specific person.
         * @summary List available components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableComponents(options?: AxiosRequestConfig): AxiosPromise<PersonListAvailableComponentsResponse> {
            return localVarFp.listAvailableComponents(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the items that are in a given budget.
         * @summary List budget items
         * @param {PersonApiListBudgetItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBudgetItems(requestParameters: PersonApiListBudgetItemsRequest, options?: AxiosRequestConfig): AxiosPromise<PersonListBudgetItemsResponse> {
            return localVarFp.listBudgetItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Belgium only: this API allows you to list all historical DIMONA information for one person
         * @summary List dimonas by person
         * @param {PersonApiListDimonasByPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDimonasByPerson(requestParameters: PersonApiListDimonasByPersonRequest, options?: AxiosRequestConfig): AxiosPromise<PersonListDimonasByPersonResponse> {
            return localVarFp.listDimonasByPerson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List people
         * @param {PersonApiListPeopleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPeople(requestParameters: PersonApiListPeopleRequest, options?: AxiosRequestConfig): AxiosPromise<PersonListPeopleResponse> {
            return localVarFp.listPeople(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new event or overwrite an existing one in a personal calender (eg a day off, overtime,..)
         * @summary Overwrite event
         * @param {PersonApiOverwriteEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overwriteEvent(requestParameters: PersonApiOverwriteEventRequest, options?: AxiosRequestConfig): AxiosPromise<PersonOverwriteEventResponse> {
            return localVarFp.overwriteEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an event from the calender, such as a day off
         * @summary Delete event
         * @param {PersonApiRemoveEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEvent(requestParameters: PersonApiRemoveEventRequest, options?: AxiosRequestConfig): AxiosPromise<PersonRemoveEventResponse> {
            return localVarFp.removeEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * reset the time worked on a given day to the regular work schedule for one person
         * @summary Reset time worked
         * @param {PersonApiResetTimeWorkedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTimeWorked(requestParameters: PersonApiResetTimeWorkedRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.resetTimeWorked(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * search people by name, email or national number
         * @summary Search people
         * @param {PersonApiSearchByCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByCriteria(requestParameters: PersonApiSearchByCriteriaRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PersonSearchByCriteriaResponseInner>> {
            return localVarFp.searchByCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the function description for each person
         * @summary Update role
         * @param {PersonApiSetFunctionDescriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFunctionDescription(requestParameters: PersonApiSetFunctionDescriptionRequest, options?: AxiosRequestConfig): AxiosPromise<PersonSetFunctionDescriptionResponse> {
            return localVarFp.setFunctionDescription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Overwrite the amount of time worked for a set of days in bulk (eg for timetracking software integrations)
         * @summary Update time worked in bulk
         * @param {PersonApiUpdateBulkTimeWorkedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBulkTimeWorked(requestParameters: PersonApiUpdateBulkTimeWorkedRequest, options?: AxiosRequestConfig): AxiosPromise<PersonUpdateBulkTimeWorkedResponse> {
            return localVarFp.updateBulkTimeWorked(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API can update the limitations for a specific event type
         * @summary Set event type limit
         * @param {PersonApiUpdateEventTypeLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventTypeLimit(requestParameters: PersonApiUpdateEventTypeLimitRequest, options?: AxiosRequestConfig): AxiosPromise<PersonUpdateEventTypeLimitResponse> {
            return localVarFp.updateEventTypeLimit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Who reports to who?
         * @summary Update manager
         * @param {PersonApiUpdateManagerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManager(requestParameters: PersonApiUpdateManagerRequest, options?: AxiosRequestConfig): AxiosPromise<PersonUpdateManagerResponse> {
            return localVarFp.updateManager(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Overwrite the amount of time worked on a certain day (eg for timetracking software integrations)
         * @summary Update time worked
         * @param {PersonApiUpdateTimeWorkedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeWorked(requestParameters: PersonApiUpdateTimeWorkedRequest, options?: AxiosRequestConfig): AxiosPromise<PersonUpdateTimeWorkedResponse> {
            return localVarFp.updateTimeWorked(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * upload a photo of this person
         * @summary Upload avatar
         * @param {PersonApiUploadAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAvatar(requestParameters: PersonApiUploadAvatarRequest, options?: AxiosRequestConfig): AxiosPromise<PersonUploadAvatarResponse> {
            return localVarFp.uploadAvatar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * View the role history for one person
         * @summary Role History
         * @param {PersonApiViewRoleHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRoleHistory(requestParameters: PersonApiViewRoleHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<PersonViewRoleHistoryResponse> {
            return localVarFp.viewRoleHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToCalendar operation in PersonApi.
 * @export
 * @interface PersonApiAddToCalendarRequest
 */
export type PersonApiAddToCalendarRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiAddToCalendar
    */
    readonly personId: number
    
}

/**
 * Request parameters for addToCalendar_1 operation in PersonApi.
 * @export
 * @interface PersonApiAddToCalendar0Request
 */
export type PersonApiAddToCalendar0Request = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiAddToCalendar0
    */
    readonly personId: number
    
}

/**
 * Request parameters for editDetail operation in PersonApi.
 * @export
 * @interface PersonApiEditDetailRequest
 */
export type PersonApiEditDetailRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiEditDetail
    */
    readonly personId: number
    
}

/**
 * Request parameters for getBudgetsByYear operation in PersonApi.
 * @export
 * @interface PersonApiGetBudgetsByYearRequest
 */
export type PersonApiGetBudgetsByYearRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetBudgetsByYear
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetBudgetsByYear
    */
    readonly year: number
    
}

/**
 * Request parameters for getCurrentWage operation in PersonApi.
 * @export
 * @interface PersonApiGetCurrentWageRequest
 */
export type PersonApiGetCurrentWageRequest = {
    
    /**
    * The person you would like to receive wage information on
    * @type {string}
    * @memberof PersonApiGetCurrentWage
    */
    readonly personId: string
    
}

/**
 * Request parameters for getCurrentWeeklySchedule operation in PersonApi.
 * @export
 * @interface PersonApiGetCurrentWeeklyScheduleRequest
 */
export type PersonApiGetCurrentWeeklyScheduleRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetCurrentWeeklySchedule
    */
    readonly personId: number
    
}

/**
 * Request parameters for getCustomFields operation in PersonApi.
 * @export
 * @interface PersonApiGetCustomFieldsRequest
 */
export type PersonApiGetCustomFieldsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetCustomFields
    */
    readonly personId: number
    
}

/**
 * Request parameters for getDailyCalendar operation in PersonApi.
 * @export
 * @interface PersonApiGetDailyCalendarRequest
 */
export type PersonApiGetDailyCalendarRequest = {
    
    /**
    * The person you would like to receive calender information on
    * @type {number}
    * @memberof PersonApiGetDailyCalendar
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetDailyCalendar
    */
    readonly year: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetDailyCalendar
    */
    readonly month: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetDailyCalendar
    */
    readonly day: number
    
}

/**
 * Request parameters for getDetail operation in PersonApi.
 * @export
 * @interface PersonApiGetDetailRequest
 */
export type PersonApiGetDetailRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PersonApiGetDetail
    */
    readonly personId: string
    
}

/**
 * Request parameters for getEventTypeLimits operation in PersonApi.
 * @export
 * @interface PersonApiGetEventTypeLimitsRequest
 */
export type PersonApiGetEventTypeLimitsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetEventTypeLimits
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetEventTypeLimits
    */
    readonly year: number
    
}

/**
 * Request parameters for getManagerDetails operation in PersonApi.
 * @export
 * @interface PersonApiGetManagerDetailsRequest
 */
export type PersonApiGetManagerDetailsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetManagerDetails
    */
    readonly personId: number
    
}

/**
 * Request parameters for getMonthlyCalendar operation in PersonApi.
 * @export
 * @interface PersonApiGetMonthlyCalendarRequest
 */
export type PersonApiGetMonthlyCalendarRequest = {
    
    /**
    * The person you would like to receive calender information on
    * @type {number}
    * @memberof PersonApiGetMonthlyCalendar
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetMonthlyCalendar
    */
    readonly year: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetMonthlyCalendar
    */
    readonly month: number
    
}

/**
 * Request parameters for getOneOffWageComponentsByMonth operation in PersonApi.
 * @export
 * @interface PersonApiGetOneOffWageComponentsByMonthRequest
 */
export type PersonApiGetOneOffWageComponentsByMonthRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetOneOffWageComponentsByMonth
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetOneOffWageComponentsByMonth
    */
    readonly year: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetOneOffWageComponentsByMonth
    */
    readonly month: number
    
}

/**
 * Request parameters for getPerformanceReviewsByPerson operation in PersonApi.
 * @export
 * @interface PersonApiGetPerformanceReviewsByPersonRequest
 */
export type PersonApiGetPerformanceReviewsByPersonRequest = {
    
    /**
    * Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
    * @type {number}
    * @memberof PersonApiGetPerformanceReviewsByPerson
    */
    readonly page: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetPerformanceReviewsByPerson
    */
    readonly personId: number
    
}

/**
 * Request parameters for getPersonalDataChanges operation in PersonApi.
 * @export
 * @interface PersonApiGetPersonalDataChangesRequest
 */
export type PersonApiGetPersonalDataChangesRequest = {
    
    /**
    * Defaults to 1 week ago
    * @type {string}
    * @memberof PersonApiGetPersonalDataChanges
    */
    readonly sinceTimestamp?: string
    
}

/**
 * Request parameters for getVerzuimPeriods operation in PersonApi.
 * @export
 * @interface PersonApiGetVerzuimPeriodsRequest
 */
export type PersonApiGetVerzuimPeriodsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetVerzuimPeriods
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetVerzuimPeriods
    */
    readonly year: number
    
}

/**
 * Request parameters for getWageHistory operation in PersonApi.
 * @export
 * @interface PersonApiGetWageHistoryRequest
 */
export type PersonApiGetWageHistoryRequest = {
    
    /**
    * The person you need the wage history for
    * @type {string}
    * @memberof PersonApiGetWageHistory
    */
    readonly personId: string
    
}

/**
 * Request parameters for getYearlyCalendar operation in PersonApi.
 * @export
 * @interface PersonApiGetYearlyCalendarRequest
 */
export type PersonApiGetYearlyCalendarRequest = {
    
    /**
    * The person you would like to receive calender information on
    * @type {number}
    * @memberof PersonApiGetYearlyCalendar
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiGetYearlyCalendar
    */
    readonly year: number
    
    /**
    * can be either \'all\' or \'days_with_events\' to return only days containing events
    * @type {string}
    * @memberof PersonApiGetYearlyCalendar
    */
    readonly filter?: string
    
}

/**
 * Request parameters for listBudgetItems operation in PersonApi.
 * @export
 * @interface PersonApiListBudgetItemsRequest
 */
export type PersonApiListBudgetItemsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiListBudgetItems
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiListBudgetItems
    */
    readonly budgetId: number
    
}

/**
 * Request parameters for listDimonasByPerson operation in PersonApi.
 * @export
 * @interface PersonApiListDimonasByPersonRequest
 */
export type PersonApiListDimonasByPersonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiListDimonasByPerson
    */
    readonly personId: number
    
}

/**
 * Request parameters for listPeople operation in PersonApi.
 * @export
 * @interface PersonApiListPeopleRequest
 */
export type PersonApiListPeopleRequest = {
    
    /**
    * Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
    * @type {number}
    * @memberof PersonApiListPeople
    */
    readonly page: number
    
    /**
    * Include archived people in response
    * @type {number}
    * @memberof PersonApiListPeople
    */
    readonly includeArchived?: number
    
}

/**
 * Request parameters for overwriteEvent operation in PersonApi.
 * @export
 * @interface PersonApiOverwriteEventRequest
 */
export type PersonApiOverwriteEventRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PersonApiOverwriteEvent
    */
    readonly personId: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonApiOverwriteEvent
    */
    readonly year: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonApiOverwriteEvent
    */
    readonly month: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonApiOverwriteEvent
    */
    readonly day: string
    
}

/**
 * Request parameters for removeEvent operation in PersonApi.
 * @export
 * @interface PersonApiRemoveEventRequest
 */
export type PersonApiRemoveEventRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiRemoveEvent
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiRemoveEvent
    */
    readonly eventId: number
    
}

/**
 * Request parameters for resetTimeWorked operation in PersonApi.
 * @export
 * @interface PersonApiResetTimeWorkedRequest
 */
export type PersonApiResetTimeWorkedRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiResetTimeWorked
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiResetTimeWorked
    */
    readonly year: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiResetTimeWorked
    */
    readonly month: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiResetTimeWorked
    */
    readonly day: number
    
}

/**
 * Request parameters for searchByCriteria operation in PersonApi.
 * @export
 * @interface PersonApiSearchByCriteriaRequest
 */
export type PersonApiSearchByCriteriaRequest = {
    
    /**
    * eg John Doe
    * @type {string}
    * @memberof PersonApiSearchByCriteria
    */
    readonly name?: string
    
    /**
    * eg john@doe.net
    * @type {string}
    * @memberof PersonApiSearchByCriteria
    */
    readonly email?: string
    
    /**
    * eg 82146126684
    * @type {string}
    * @memberof PersonApiSearchByCriteria
    */
    readonly nationalNumber?: string
    
}

/**
 * Request parameters for setFunctionDescription operation in PersonApi.
 * @export
 * @interface PersonApiSetFunctionDescriptionRequest
 */
export type PersonApiSetFunctionDescriptionRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiSetFunctionDescription
    */
    readonly personId: number
    
}

/**
 * Request parameters for updateBulkTimeWorked operation in PersonApi.
 * @export
 * @interface PersonApiUpdateBulkTimeWorkedRequest
 */
export type PersonApiUpdateBulkTimeWorkedRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateBulkTimeWorked
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateBulkTimeWorked
    */
    readonly year: number
    
}

/**
 * Request parameters for updateEventTypeLimit operation in PersonApi.
 * @export
 * @interface PersonApiUpdateEventTypeLimitRequest
 */
export type PersonApiUpdateEventTypeLimitRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateEventTypeLimit
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateEventTypeLimit
    */
    readonly year: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateEventTypeLimit
    */
    readonly typeId: number
    
}

/**
 * Request parameters for updateManager operation in PersonApi.
 * @export
 * @interface PersonApiUpdateManagerRequest
 */
export type PersonApiUpdateManagerRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateManager
    */
    readonly personId: number
    
}

/**
 * Request parameters for updateTimeWorked operation in PersonApi.
 * @export
 * @interface PersonApiUpdateTimeWorkedRequest
 */
export type PersonApiUpdateTimeWorkedRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateTimeWorked
    */
    readonly personId: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateTimeWorked
    */
    readonly year: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateTimeWorked
    */
    readonly month: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUpdateTimeWorked
    */
    readonly day: number
    
}

/**
 * Request parameters for uploadAvatar operation in PersonApi.
 * @export
 * @interface PersonApiUploadAvatarRequest
 */
export type PersonApiUploadAvatarRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiUploadAvatar
    */
    readonly personId: number
    
}

/**
 * Request parameters for viewRoleHistory operation in PersonApi.
 * @export
 * @interface PersonApiViewRoleHistoryRequest
 */
export type PersonApiViewRoleHistoryRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PersonApiViewRoleHistory
    */
    readonly personId: number
    
}

/**
 * PersonApiGenerated - object-oriented interface
 * @export
 * @class PersonApiGenerated
 * @extends {BaseAPI}
 */
export class PersonApiGenerated extends BaseAPI {
    /**
     * Add a new person to Officient
     * @summary Add person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public addNew(options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).addNew(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add new events to a calender (eg a day off, overtime,..)
     * @summary Add event
     * @param {PersonApiAddToCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public addToCalendar(requestParameters: PersonApiAddToCalendarRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).addToCalendar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds events to a person\'s calendar based on a priority scheme of event types
     * @summary Use priority scheme
     * @param {PersonApiAddToCalendar0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public addToCalendar_1(requestParameters: PersonApiAddToCalendar0Request, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).addToCalendar_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit person
     * @param {PersonApiEditDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public editDetail(requestParameters: PersonApiEditDetailRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).editDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a list of budgets for a given person and year.
     * @summary List budgets
     * @param {PersonApiGetBudgetsByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getBudgetsByYear(requestParameters: PersonApiGetBudgetsByYearRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getBudgetsByYear(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current wage details for one person
     * @summary Current wage
     * @param {PersonApiGetCurrentWageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getCurrentWage(requestParameters: PersonApiGetCurrentWageRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getCurrentWage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Weekly schedule
     * @param {PersonApiGetCurrentWeeklyScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getCurrentWeeklySchedule(requestParameters: PersonApiGetCurrentWeeklyScheduleRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getCurrentWeeklySchedule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Person custom fields
     * @param {PersonApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getCustomFields(requestParameters: PersonApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the time off, overtime & scheduled time for a single person for a single day
     * @summary Daily calendar
     * @param {PersonApiGetDailyCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getDailyCalendar(requestParameters: PersonApiGetDailyCalendarRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getDailyCalendar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Person detail
     * @param {PersonApiGetDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getDetail(requestParameters: PersonApiGetDetailRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API can tell how many days off a certain person has in a certain year
     * @summary Event type limits
     * @param {PersonApiGetEventTypeLimitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getEventTypeLimits(requestParameters: PersonApiGetEventTypeLimitsRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getEventTypeLimits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Person manager
     * @param {PersonApiGetManagerDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getManagerDetails(requestParameters: PersonApiGetManagerDetailsRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getManagerDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the time off, overtime & scheduled time for a single person for an entire month
     * @summary Monthly calendar
     * @param {PersonApiGetMonthlyCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getMonthlyCalendar(requestParameters: PersonApiGetMonthlyCalendarRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getMonthlyCalendar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the one-off wage components that are granted to a person on a specific month
     * @summary Components by person by month
     * @param {PersonApiGetOneOffWageComponentsByMonthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getOneOffWageComponentsByMonth(requestParameters: PersonApiGetOneOffWageComponentsByMonthRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getOneOffWageComponentsByMonth(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * show metadata for performance reviews by person. No content (notes,..) are exposed
     * @summary List performance reviews
     * @param {PersonApiGetPerformanceReviewsByPersonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getPerformanceReviewsByPerson(requestParameters: PersonApiGetPerformanceReviewsByPersonRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getPerformanceReviewsByPerson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the latest delta of changes to personal data
     * @summary Personal data audit log
     * @param {PersonApiGetPersonalDataChangesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getPersonalDataChanges(requestParameters: PersonApiGetPersonalDataChangesRequest = {}, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getPersonalDataChanges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List verzuim periods
     * @param {PersonApiGetVerzuimPeriodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getVerzuimPeriods(requestParameters: PersonApiGetVerzuimPeriodsRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getVerzuimPeriods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the entire wage history for one person
     * @summary Wage history
     * @param {PersonApiGetWageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getWageHistory(requestParameters: PersonApiGetWageHistoryRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getWageHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the time off, overtime & scheduled time for a single person for an entire year
     * @summary Yearly calendar
     * @param {PersonApiGetYearlyCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public getYearlyCalendar(requestParameters: PersonApiGetYearlyCalendarRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).getYearlyCalendar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a list of available one-off wage components (eg bonus, expense compensation,..) for a specific person.
     * @summary List available components
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public listAvailableComponents(options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).listAvailableComponents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the items that are in a given budget.
     * @summary List budget items
     * @param {PersonApiListBudgetItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public listBudgetItems(requestParameters: PersonApiListBudgetItemsRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).listBudgetItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Belgium only: this API allows you to list all historical DIMONA information for one person
     * @summary List dimonas by person
     * @param {PersonApiListDimonasByPersonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public listDimonasByPerson(requestParameters: PersonApiListDimonasByPersonRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).listDimonasByPerson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List people
     * @param {PersonApiListPeopleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public listPeople(requestParameters: PersonApiListPeopleRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).listPeople(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new event or overwrite an existing one in a personal calender (eg a day off, overtime,..)
     * @summary Overwrite event
     * @param {PersonApiOverwriteEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public overwriteEvent(requestParameters: PersonApiOverwriteEventRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).overwriteEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an event from the calender, such as a day off
     * @summary Delete event
     * @param {PersonApiRemoveEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public removeEvent(requestParameters: PersonApiRemoveEventRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).removeEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * reset the time worked on a given day to the regular work schedule for one person
     * @summary Reset time worked
     * @param {PersonApiResetTimeWorkedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public resetTimeWorked(requestParameters: PersonApiResetTimeWorkedRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).resetTimeWorked(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * search people by name, email or national number
     * @summary Search people
     * @param {PersonApiSearchByCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public searchByCriteria(requestParameters: PersonApiSearchByCriteriaRequest = {}, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).searchByCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the function description for each person
     * @summary Update role
     * @param {PersonApiSetFunctionDescriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public setFunctionDescription(requestParameters: PersonApiSetFunctionDescriptionRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).setFunctionDescription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overwrite the amount of time worked for a set of days in bulk (eg for timetracking software integrations)
     * @summary Update time worked in bulk
     * @param {PersonApiUpdateBulkTimeWorkedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public updateBulkTimeWorked(requestParameters: PersonApiUpdateBulkTimeWorkedRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).updateBulkTimeWorked(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API can update the limitations for a specific event type
     * @summary Set event type limit
     * @param {PersonApiUpdateEventTypeLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public updateEventTypeLimit(requestParameters: PersonApiUpdateEventTypeLimitRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).updateEventTypeLimit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Who reports to who?
     * @summary Update manager
     * @param {PersonApiUpdateManagerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public updateManager(requestParameters: PersonApiUpdateManagerRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).updateManager(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overwrite the amount of time worked on a certain day (eg for timetracking software integrations)
     * @summary Update time worked
     * @param {PersonApiUpdateTimeWorkedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public updateTimeWorked(requestParameters: PersonApiUpdateTimeWorkedRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).updateTimeWorked(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * upload a photo of this person
     * @summary Upload avatar
     * @param {PersonApiUploadAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public uploadAvatar(requestParameters: PersonApiUploadAvatarRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).uploadAvatar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View the role history for one person
     * @summary Role History
     * @param {PersonApiViewRoleHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApiGenerated
     */
    public viewRoleHistory(requestParameters: PersonApiViewRoleHistoryRequest, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).viewRoleHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
