/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PrioritySchemeListActivePrioritySchemesByYearResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PrioritySchemeApi - axios parameter creator
 * @export
 */
export const PrioritySchemeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * lists the active priority schemes for a specific year
         * @summary List priority schemes
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivePrioritySchemesByYear: async (year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('listActivePrioritySchemesByYear', 'year', year)
            const localVarPath = `/1.0/calendar/events/priorityschemes/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/calendar/events/priorityschemes/{year}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrioritySchemeApi - functional programming interface
 * @export
 */
export const PrioritySchemeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrioritySchemeApiAxiosParamCreator(configuration)
    return {
        /**
         * lists the active priority schemes for a specific year
         * @summary List priority schemes
         * @param {PrioritySchemeApiListActivePrioritySchemesByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActivePrioritySchemesByYear(requestParameters: PrioritySchemeApiListActivePrioritySchemesByYearRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrioritySchemeListActivePrioritySchemesByYearResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActivePrioritySchemesByYear(requestParameters.year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrioritySchemeApi - factory interface
 * @export
 */
export const PrioritySchemeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrioritySchemeApiFp(configuration)
    return {
        /**
         * lists the active priority schemes for a specific year
         * @summary List priority schemes
         * @param {PrioritySchemeApiListActivePrioritySchemesByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivePrioritySchemesByYear(requestParameters: PrioritySchemeApiListActivePrioritySchemesByYearRequest, options?: AxiosRequestConfig): AxiosPromise<PrioritySchemeListActivePrioritySchemesByYearResponse> {
            return localVarFp.listActivePrioritySchemesByYear(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listActivePrioritySchemesByYear operation in PrioritySchemeApi.
 * @export
 * @interface PrioritySchemeApiListActivePrioritySchemesByYearRequest
 */
export type PrioritySchemeApiListActivePrioritySchemesByYearRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PrioritySchemeApiListActivePrioritySchemesByYear
    */
    readonly year: number
    
}

/**
 * PrioritySchemeApiGenerated - object-oriented interface
 * @export
 * @class PrioritySchemeApiGenerated
 * @extends {BaseAPI}
 */
export class PrioritySchemeApiGenerated extends BaseAPI {
    /**
     * lists the active priority schemes for a specific year
     * @summary List priority schemes
     * @param {PrioritySchemeApiListActivePrioritySchemesByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrioritySchemeApiGenerated
     */
    public listActivePrioritySchemesByYear(requestParameters: PrioritySchemeApiListActivePrioritySchemesByYearRequest, options?: AxiosRequestConfig) {
        return PrioritySchemeApiFp(this.configuration).listActivePrioritySchemesByYear(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
