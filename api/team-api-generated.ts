/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TeamCreateNewTeam400Response } from '../models';
// @ts-ignore
import { TeamCreateNewTeamResponse } from '../models';
// @ts-ignore
import { TeamEditInformation400Response } from '../models';
// @ts-ignore
import { TeamEditInformationResponse } from '../models';
// @ts-ignore
import { TeamGetAllTeamsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTeam: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/teams/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/teams/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit team
         * @param {number} teamId The ID of the team you\&#39;d like to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editInformation: async (teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('editInformation', 'teamId', teamId)
            const localVarPath = `/1.0/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId !== undefined ? teamId : `-team_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/teams/{team_id}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all teams
         * @summary List teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/teams/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/teams/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTeam(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamCreateNewTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTeam(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit team
         * @param {TeamApiEditInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editInformation(requestParameters: TeamApiEditInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamEditInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editInformation(requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all teams
         * @summary List teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTeams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamGetAllTeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTeams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * 
         * @summary Add team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTeam(options?: AxiosRequestConfig): AxiosPromise<TeamCreateNewTeamResponse> {
            return localVarFp.createNewTeam(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit team
         * @param {TeamApiEditInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editInformation(requestParameters: TeamApiEditInformationRequest, options?: AxiosRequestConfig): AxiosPromise<TeamEditInformationResponse> {
            return localVarFp.editInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all teams
         * @summary List teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams(options?: AxiosRequestConfig): AxiosPromise<TeamGetAllTeamsResponse> {
            return localVarFp.getAllTeams(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for editInformation operation in TeamApi.
 * @export
 * @interface TeamApiEditInformationRequest
 */
export type TeamApiEditInformationRequest = {
    
    /**
    * The ID of the team you\'d like to update
    * @type {number}
    * @memberof TeamApiEditInformation
    */
    readonly teamId: number
    
}

/**
 * TeamApiGenerated - object-oriented interface
 * @export
 * @class TeamApiGenerated
 * @extends {BaseAPI}
 */
export class TeamApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public createNewTeam(options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).createNewTeam(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit team
     * @param {TeamApiEditInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public editInformation(requestParameters: TeamApiEditInformationRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).editInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all teams
     * @summary List teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiGenerated
     */
    public getAllTeams(options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getAllTeams(options).then((request) => request(this.axios, this.basePath));
    }
}
