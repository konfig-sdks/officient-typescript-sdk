/* tslint:disable */
/* eslint-disable */
/*
Officient API

Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.

We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VehicleCreateNew400Response } from '../models';
// @ts-ignore
import { VehicleCreateNewResponse } from '../models';
// @ts-ignore
import { VehicleEditDetails400Response } from '../models';
// @ts-ignore
import { VehicleEditDetailsResponse } from '../models';
// @ts-ignore
import { VehicleGetAllVehiclesResponse } from '../models';
// @ts-ignore
import { VehicleGetDetailResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VehicleApi - axios parameter creator
 * @export
 */
export const VehicleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add vehicle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1.0/fleet/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/fleet/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit vehicle
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDetails: async (vehicleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('editDetails', 'vehicleId', vehicleId)
            const localVarPath = `/1.0/fleet/{vehicle_id}`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId !== undefined ? vehicleId : `-vehicle_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/fleet/{vehicle_id}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all vehicles in the fleet
         * @summary List vehicles
         * @param {number} page Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
         * @param {number} [personId] view only vehicles that belong to a specific person
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicles: async (page: number, personId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllVehicles', 'page', page)
            const localVarPath = `/1.0/fleet/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (personId !== undefined) {
                localVarQueryParameter['person_id'] = personId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/fleet/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about one vehicle in the fleet
         * @summary Vehicle detail
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (vehicleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getDetail', 'vehicleId', vehicleId)
            const localVarPath = `/1.0/fleet/{vehicle_id}/detail`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId !== undefined ? vehicleId : `-vehicle_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/1.0/fleet/{vehicle_id}/detail',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleApi - functional programming interface
 * @export
 */
export const VehicleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add vehicle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleCreateNewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit vehicle
         * @param {VehicleApiEditDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editDetails(requestParameters: VehicleApiEditDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleEditDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editDetails(requestParameters.vehicleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all vehicles in the fleet
         * @summary List vehicles
         * @param {VehicleApiGetAllVehiclesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVehicles(requestParameters: VehicleApiGetAllVehiclesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleGetAllVehiclesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVehicles(requestParameters.page, requestParameters.personId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details about one vehicle in the fleet
         * @summary Vehicle detail
         * @param {VehicleApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(requestParameters: VehicleApiGetDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleGetDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(requestParameters.vehicleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleApi - factory interface
 * @export
 */
export const VehicleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleApiFp(configuration)
    return {
        /**
         * 
         * @summary Add vehicle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(options?: AxiosRequestConfig): AxiosPromise<VehicleCreateNewResponse> {
            return localVarFp.createNew(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit vehicle
         * @param {VehicleApiEditDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDetails(requestParameters: VehicleApiEditDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleEditDetailsResponse> {
            return localVarFp.editDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all vehicles in the fleet
         * @summary List vehicles
         * @param {VehicleApiGetAllVehiclesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicles(requestParameters: VehicleApiGetAllVehiclesRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleGetAllVehiclesResponse> {
            return localVarFp.getAllVehicles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about one vehicle in the fleet
         * @summary Vehicle detail
         * @param {VehicleApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(requestParameters: VehicleApiGetDetailRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleGetDetailResponse> {
            return localVarFp.getDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for editDetails operation in VehicleApi.
 * @export
 * @interface VehicleApiEditDetailsRequest
 */
export type VehicleApiEditDetailsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof VehicleApiEditDetails
    */
    readonly vehicleId: number
    
}

/**
 * Request parameters for getAllVehicles operation in VehicleApi.
 * @export
 * @interface VehicleApiGetAllVehiclesRequest
 */
export type VehicleApiGetAllVehiclesRequest = {
    
    /**
    * Controls pagination (0, 1, 2, ..) to view all results. 30 items per page.
    * @type {number}
    * @memberof VehicleApiGetAllVehicles
    */
    readonly page: number
    
    /**
    * view only vehicles that belong to a specific person
    * @type {number}
    * @memberof VehicleApiGetAllVehicles
    */
    readonly personId?: number
    
}

/**
 * Request parameters for getDetail operation in VehicleApi.
 * @export
 * @interface VehicleApiGetDetailRequest
 */
export type VehicleApiGetDetailRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof VehicleApiGetDetail
    */
    readonly vehicleId: number
    
}

/**
 * VehicleApiGenerated - object-oriented interface
 * @export
 * @class VehicleApiGenerated
 * @extends {BaseAPI}
 */
export class VehicleApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add vehicle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApiGenerated
     */
    public createNew(options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).createNew(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit vehicle
     * @param {VehicleApiEditDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApiGenerated
     */
    public editDetails(requestParameters: VehicleApiEditDetailsRequest, options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).editDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all vehicles in the fleet
     * @summary List vehicles
     * @param {VehicleApiGetAllVehiclesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApiGenerated
     */
    public getAllVehicles(requestParameters: VehicleApiGetAllVehiclesRequest, options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).getAllVehicles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details about one vehicle in the fleet
     * @summary Vehicle detail
     * @param {VehicleApiGetDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApiGenerated
     */
    public getDetail(requestParameters: VehicleApiGetDetailRequest, options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).getDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
